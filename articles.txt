https://simonwillison.net/2025/Apr/21/ai-assisted-search/
https://ericholscher.com/blog/2009/nov/2/large-problems-django-mostly-solved/
https://www.reddit.com/r/django/comments/bhvhz/the_onion_uses_django_and_why_it_matters_to_us/
https://www.morethanseven.net/2009/02/11/django-settings-tip-setting-relative-paths/
https://simonwillison.net/2025/Jun/6/six-months-in-llms/
https://simonwillison.net/2025/Jun/3/tips-for-peter-kyle/
https://blog.miguelgrinberg.com/post/why-generative-ai-coding-tools-and-agents-do-not-work-for-me
https://blog.miguelgrinberg.com/post/is-python-really-that-slow
https://blog.miguelgrinberg.com/post/the-ultimate-guide-to-error-handling-in-python
https://blog.miguelgrinberg.com/post/how-llms-work-explained-without-math
https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask
https://blog.miguelgrinberg.com/post/designing-a-restful-api-using-flask-restful
https://www.fullstackpython.com/django.html
https://www.fullstackpython.com/databases.html
https://www.fullstackpython.com/postgresql.html
https://www.fullstackpython.com/mysql.html
https://www.fullstackpython.com/sqlite.html
https://www.fullstackpython.com/react.html
https://www.fullstackpython.com/servers.html
https://www.fullstackpython.com/docker.html
https://www.fullstackpython.com/kubernetes.html
https://www.fullstackpython.com/microservices.html
https://www.fullstackpython.com/application-programming-interfaces.html
https://www.fullstackpython.com/webhooks.html
https://www.fullstackpython.com/https.html
https://www.fullstackpython.com/django-rest-framework-drf.html
https://www.fullstackpython.com/sql-injection.html
https://www.fullstackpython.com/cross-site-request-forgery-csrf.html
https://www.fullstackpython.com/aws-lambda.html
https://www.fullstackpython.com/companies-using-python.html
https://norvig.com/chomsky.html
https://norvig.com/design-patterns/design-patterns.pdf
https://norvig.com/21-days.html
https://danluu.com/ballmer/
https://danluu.com/impossible-agree/
https://danluu.com/simple-architectures/
https://danluu.com/talent/
https://danluu.com/people-matter/
https://danluu.com/culture/
https://danluu.com/android-updates/
https://danluu.com/programming-books/
https://danluu.com/sounds-easy/
https://danluu.com/learning-to-program/
https://danluu.com/programming-blogs/
https://danluu.com/file-consistency/
https://danluu.com/monorepo/
https://danluu.com/navigate-url/
https://danluu.com/math-bias/
https://www.joelonsoftware.com/2021/06/02/kinda-a-big-announcement/
https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/
https://www.joelonsoftware.com/2000/05/12/strategy-letter-i-ben-and-jerrys-vs-amazon/
https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/
https://www.joelonsoftware.com/2002/01/06/fire-and-motion/
https://www.joelonsoftware.com/2002/02/13/the-iceberg-secret-revealed/
https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/
https://www.joelonsoftware.com/2004/06/13/how-microsoft-lost-the-api-war/
https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/
https://www.joelonsoftware.com/2006/04/11/the-development-abstraction-layer-2/
https://www.joelonsoftware.com/2009/09/23/the-duct-tape-programmer/
https://www.joelonsoftware.com/2000/11/08/painless-bug-tracking/
https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/
https://www.joelonsoftware.com/2001/11/20/a-hard-drill-makes-an-easy-battle/
https://www.joelonsoftware.com/2001/12/11/back-to-basics/
https://www.joelonsoftware.com/2003/12/01/craftsmanship-2/
https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/
https://www.joelonsoftware.com/2002/05/06/five-worlds/
https://www.joelonsoftware.com/2000/04/18/affordances-and-metaphors/
https://www.joelonsoftware.com/2000/04/26/designing-for-people-who-have-better-things-to-do-with-their-lives/
https://www.joelonsoftware.com/2001/03/24/how-many-lies-can-you-find-in-one-direct-mail-piece/
https://www.joelonsoftware.com/2003/01/15/mouth-wide-shut/
https://www.joelonsoftware.com/2004/12/15/camels-and-rubber-duckies/
https://www.joelonsoftware.com/2007/12/06/where-theres-muck-theres-brass/
https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/
https://leaddev.com/velocity/real-reason-teams-velocity-improving
https://leaddev.com/the-engineering-leadership-report-2025
https://leaddev.com/the-state-of-feature-management-and-experimentation-2024
https://leaddev.com/software-quality/the-quickly-evolving-role-of-qa
https://leaddev.com/software-quality/testing-is-the-silent-hero-of-software-engineering
https://leaddev.com/software-quality/four-pillars-code-health
https://leaddev.com/software-quality/4-ways-to-ship-smarter-not-just-faster
https://leaddev.com/software-quality/guide-creating-great-code-documentation-culture
https://leaddev.com/software-quality/how-bake-quality-your-teams-coding-process
https://leaddev.com/culture/building-culture-quality-engineering-teams
https://leaddev.com/software-quality/7-prompting-strategies-to-sharpen-your-ai-assisted-code
https://leaddev.com/software-quality/ai-assisted-coding-incident-magnet
https://leaddev.com/software-quality/bringing-internal-engineering-projects-world
https://leaddev.com/technical-direction/an-engineering-leaders-guide-to-solid-principles
https://leaddev.com/software-quality/the-6-warning-signs-of-overengineering
https://leaddev.com/software-quality/how-plan-and-mitigate-different-types-tech-debt
https://leaddev.com/software-quality/learning-live-legacy-code
https://leaddev.com/software-quality/making-code-reviews-teachable-moments
https://martinfowler.com/articles/20250721-links.html
https://martinfowler.com/articles/202507-three-links.html
https://agilemanifesto.org/
https://martinfowler.com/articles/is-quality-worth-cost.html
https://martinfowler.com/articles/continuousIntegration.html
https://martinfowler.com/articles/branching-patterns.html
https://martinfowler.com/bliki/BranchByAbstraction.html
https://martinfowler.com/articles/domain-oriented-observability.html
https://martinfowler.com/articles/designDead.html
https://martinfowler.com/bliki/CodeAsDocumentation.html
https://martinfowler.com/articles/on-pair-programming.html
*https://martinfowler.com/articles/itsNotJustStandingUp.html
https://martinfowler.com/articles/useOfMetrics.html
https://martinfowler.com/bliki/OutcomeOriented.html
https://martinfowler.com/bliki/AgileImposition.html
https://martinfowler.com/bliki/SemanticDiffusion.html
https://martinfowler.com/articles/class-too-large.html
https://martinfowler.com/articles/refactoring-document-load.html
https://martinfowler.com/articles/preparatory-refactoring-example.html
https://martinfowler.com/articles/refactoring-pipelines.html
https://martinfowler.com/articles/replaceThrowWithNotification.html
https://martinfowler.com/articles/refactoring-dependencies.html
https://martinfowler.com/articles/refactoring-external-service.html
https://martinfowler.com/articles/refactoring-adaptive-model.html
https://martinfowler.com/articles/microservices.html
https://martinfowler.com/articles/microservice-trade-offs.html
https://martinfowler.com/bliki/MonolithFirst.html
https://martinfowler.com/articles/dont-start-monolith.html
https://martinfowler.com/bliki/MicroservicePrerequisites.html
https://martinfowler.com/articles/distributed-objects-microservices.html
https://martinfowler.com/articles/microservice-testing/
https://martinfowler.com/articles/break-monolith-into-microservices.html
https://martinfowler.com/bliki/ApplicationBoundary.html
https://martinfowler.com/bliki/PresentationDomainDataLayering.html
https://martinfowler.com/articles/modularizing-react-apps.html
https://martinfowler.com/articles/products-over-projects.html
https://swagger.io/resources/articles/best-practices-in-api-design/
https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design
https://medium.com/@syedabdullahrahman/mastering-rest-api-design-essential-best-practices-dos-and-don-ts-for-2024-dd41a2c59133
https://www.getambassador.io/blog/7-rest-api-design-best-practices